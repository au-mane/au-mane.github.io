import{w as s}from"./index.CaGA8Eob.js";import{s as n}from"./supabase-config.Y8iSvhNi.js";import{A}from"./scheduler.C4kY8riC.js";const f=s([]);let l=!1;async function u(){if(l)return A(f);l=!0;const{data:t,error:e}=await n.from("accounts").select("*").order("sort_index",{ascending:!0});if(e)throw e;const c=t||[];return f.set(c),l=!1,c}async function w(t){const{data:e,error:c}=await n.from("accounts").insert([t]).select();if(c)throw c;return await u(),e?e[0]:void 0}async function y(t,e){const{data:c,error:i}=await n.from("accounts").update(e).eq("id",t).select();if(i)throw i;return await u(),c?c[0]:void 0}async function h(t){const{error:e}=await n.from("accounts").delete().eq("id",t);if(e)throw e;await u()}let o=null;const p=()=>{const t=s(!1),e=s([]),c=s();return o={stores:{loading:t,targetAccount:c,data:e},actions:{reload:async()=>{t.set(!0);const a=await u();e.set(a),t.set(!1)},createAccount:async a=>{t.set(!0);try{await w(a)}catch(r){console.error(r)}finally{t.set(!1)}},updateAccount:async(a,r)=>{t.set(!0);try{await y(a,r)}catch(d){console.error(d)}finally{t.set(!1)}},deleteAccount:async a=>{t.set(!0);try{await h(a)}catch(r){console.error(r)}finally{t.set(!1)}}}},o},D=()=>o?.stores&&Object.keys(o.stores).length>0&&o?.actions&&Object.keys(o.actions).length>0?o:p();export{D as g};
